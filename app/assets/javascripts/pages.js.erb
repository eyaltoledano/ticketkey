$(() => {
  $('#content').hide()
  $.ajaxSetup({
    headers: {
      'X-CSRF-Token': Rails.csrfToken()
    }
  });
  prepareModal();
  listenForNewForm()
  listenBrowseEvents();
  $('img').on("error", function() {
    $(this).attr('src', '/images/missing.jpg');
  });
});

function listenBrowseEvents() {
  $('#browse-events-button').on('click', function(event) {
    event.preventDefault();
    getEvents();
  });
};

function fillFormOnNewFormClick() {
  $('#new_event_button').on("click", function(event) {
    $('#formDiv')
  })
}

function listenForNewForm() {
  $('form#new_event').submit(function(event) {
    event.preventDefault();
    var values = $(this).serialize();
    var posting = $.post('/events', values);

    posting.done(function(data) {
      // clear the form and reset it
      // can't just call .reset() on $('form#new_event') because .reset() is a form method, not a jquery method

      $('form#new_event').each(function() {
        this.reset();
      })
      var newEvent = new Evvent(data);
      if ($(`#eventList`).children().length == 0) {
        getEvents();
      }
      $('#eventList').prepend(newEvent.eventCard());
      flipOnClick(newEvent);
      var body = document.querySelector('body')
      var modal = document.querySelector('.modal')
      modal.classList.toggle('opacity-0')
      modal.classList.toggle('pointer-events-none')
      body.classList.toggle('modal-active')
    })
  });
};


function flipOnClick(classed_event) {
  $(`#card-${classed_event.id}-flip`).on("click", function(event) {
    event.preventDefault();

    $(`#event-${classed_event.id}-front`).after(classed_event.eventCardFlipSide());
    $(`#event-${classed_event.id}-front`).hide();
  })
}

function getEvents() {
  var id = $('#browse-events-button').data("id")
  $.ajax({
    url: `http://localhost:3000/brands/${id}.json`,
    method: 'get',
    success: function(response) {
      var events = response["events"]
      events.forEach(function(event) {
        var classed_event = new Evvent(event)
        $('#eventList').append(classed_event.eventCard())
        flipOnClick(classed_event);
      })

      $('#content').show()
    }
  })
}

class Evvent {
  constructor(object) {
    this.id = object.id;
    this.name = object.name;
    this.category = object.category;
    this.date_start = object.date_start;
    this.date_end = object.date_end;
    this.total_available_tickets = object.total_available_tickets;
    this.total_tickets = object.total_tickets;
    this.percent_sold = object.percent_sold;
  }
}

Evvent.prototype.eventCard = function() {
  return `
    <div class="w-1/3 my-1 index" id="event-${this.id}-front">
      <div class="max-w-sm rounded overflow-hidden shadow-lg mx-2" data-event-id="${this.id}">
        <a class="mx-auto my-auto" id="card-${this.id}-flip">
          <div class="bg-gray-900 px-1 py-3 relative">
            <p class="text-gray-200 antialiased text-2xl font-bold p-2">
              ${this.name}
              <span class="inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2 float-right">${this.percent_sold}</span>
            </p>
          </div>
          <img class="w-full" src="https://picsum.photos/200/180?random=${this.id}&blur=3&grayscale">
        </a>
      </div>
    </div>
  `
}

Evvent.prototype.eventCardFlipSide = function() {
  return `
    <div class="w-1/3 my-1" id="event-${this.id}-back">
       <div class="max-w-sm rounded overflow-hidden shadow-lg mx-2">
       <a href="/events/${this.id}" id="card-${this.id}-reflip">
         <img class="w-full" src="https://picsum.photos/200/100?grayscale&random=${this.id}" alt="A placeholder image">
        </a>
         <div class="px-6 py-4">
           <div class="font-bold text-xl mb-2"><a href="/events/${this.id}">${this.name}</a></div>
           <p class="text-gray-700 text-base">
             Starts on ${this.date_start}
           </p>
           <p class="text-gray-700 text-base">
             Ends on ${this.date_end}
           </p>
           <p class="text-gray-700 text-base">
             ${this.total_available_tickets} tickets left (${this.percent_sold})
           </p>
         </div>
         <div class="px-6 py-4">
           <span class="inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2">#${this.category}</span>
         </div>
       </div>


     </div>
  `
}


// modal

function prepareModal() {
  var openmodal = document.querySelectorAll('.modal-open')
  for (var i = 0; i < openmodal.length; i++) {
    openmodal[i].addEventListener('click', function(event){
  	event.preventDefault()
  	toggleModal()
    })
  }

  let overlay = document.querySelector('.modal-overlay')
  overlay.addEventListener('click', toggleModal)

  var closemodal = document.querySelectorAll('.modal-close')
  var modalCancel = document.querySelector('.modal-cancel')
  var modalCancel = document.querySelector('.modal-cancel')
  var closemodalArray = Array.from(closemodal)
  closemodalArray.push(modalCancel)
  for (var i = 0; i < closemodalArray.length; i++) {
    closemodalArray[i].addEventListener('click', toggleModal)
  }

  document.onkeydown = function(evt) {
    evt = evt || window.event
    var isEscape = false
    if ("key" in evt) {
  	isEscape = (evt.key === "Escape" || evt.key === "Esc")
    } else {
  	isEscape = (evt.keyCode === 27)
    }
    if (isEscape && document.body.classList.contains('modal-active')) {
  	toggleModal()
    }
  };


  function toggleModal () {
    var body = document.querySelector('body')
    var modal = document.querySelector('.modal')
    modal.classList.toggle('opacity-0')
    modal.classList.toggle('pointer-events-none')
    body.classList.toggle('modal-active')
  }
}

// Process
// 1. set up a submission listener and prevent the form from being submitted
// 2. Grab the items from the form fields using serialize()
// 3. Feed the serialized object hash through to the api post request (post /events)
// 4. Ensure the controller will set up the correct association, sends OK
// 5. When OK from API, call getEvents() if it hasn't already and unshift the new object into the DOM as an .eventCard
// 7. Clear the form (reset it)
// 8. Trigger closed modal upon the form being submitted
